{cells:[{kind:1,language:'markdown',value:'# Indexed Access\n\n- **W:** Accessing a property within an existing TS type\n- **B:** Ensures that the type we want to use actually exist on a type\n',metadata:{id:'BDos0R1vASTrKJk6Hohrw'}},{kind:2,language:'typescriptreact',value:'type User = {\n  id: number\n  username: string\n  password: string\n}\n\nconst getUserPassword = (): User["password"] => {\n  return "password123"\n}\n',metadata:{id:'yOdRavyL0n_tImgdQxZqz'}},{kind:1,language:'markdown',value:'# Assertion as `const`\n\n- **W:** Useful when working with literal values, arrays and objects\n- **B:** Makes the value read-only (immutability enforcement)\n\n- When applied to an array, it creates a **tuple type** where each element has its sspecific type based on its literal value\n',metadata:{id:'eaG4aFNciyJK7thBIL6SW'}},{kind:2,language:'typescriptreact',value:'const args = [20, 30] as const\n',metadata:{id:'DT8UUXTUhgpVaZr_RnhIp'}},{kind:1,language:'markdown',value:'# Type Inference with Tuple Types\n\n- Ensures that each element has the same type as the elements in the `tabs` variable\n- Tuple type -> `[number]` allows us to access the values from arrays\n- The actual type of `type Tabs = (typeof tabs)[number]` is not `string[]`, but `Array.of("Home", "About", "Contact")`\n',metadata:{id:'LRTpYHo5qsABnltmA2xTT'}},{kind:2,language:'typescriptreact',value:'const tabs = ["Home", "About", "Contact"] // string[]\n\ntype Tabs = (typeof tabs)[number] // === string[], specifically ["Home", "About", "Contact"]\n',metadata:{id:'yQnLCd5BgL8uGzEtuGYs_'}},{kind:1,language:'markdown',value:'# Interface Inheritance\n\n- React comes with several build-in interfaces\n- `React.HTMLAttributes<HTMLDivElement>` defines all the possible HTML attributes one can apply to a `div`\n- By extending this interface, `CardProps` automatically ihnerits all the native attributes\n',metadata:{id:'WDZwR3QoHFoyDQEpD6LyZ'}},{kind:2,language:'typescriptreact',value:'interface CardProps extends React.HTMLAttributes<HTMLDivElement> {\n  title: string\n} // No need to e.g., define `onClick` on your div, handled by HTMLAttributes\n',metadata:{id:'qE67j77A34BsDoYSsoLG2'}},{kind:1,language:'markdown',value:'- `CardProps` **must be an interface** since only interfaces can be **directly** extended with another interface\n- **Types** are used to **define the shape** of a value for the purposes of **type-checking**\n- **Interfaces** are used to define the structure of an object for the purposes of contract definition, **ensuring a specific structure is adhered to**\n',metadata:{id:'lFqc_aeVUqHRgE4CnSzdJ'}},{kind:1,language:'markdown',value:'## Intersection Types\n\n- **Types cannot be directly extended with an interface**, but a similar functionality can be achieved using `intersection types`\n- It allows us to **combine multiple types (interfaces can be interleaved with types)** into a single type\n',metadata:{id:'oCGvqBMT9EBTQgqnx3liv'}},{kind:2,language:'typescriptreact',value:'type Fruit = {\n  name: string\n}\n\ninterface ReactFruit {\n  family: string\n  order: string\n  genus: string\n}\n\ntype FruitProps = Fruit & ReactFruit // Intersection type\n\nconst banana: FruitProps = {\n  name: "Banana",\n  family: "Musaceae",\n  order: "Zingiberales",\n  genus: "Musa",\n}\n',metadata:{id:'zIkhYU8Qwt7iV7wK6kYLa'}}]}